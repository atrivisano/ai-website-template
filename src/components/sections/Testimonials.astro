---
// src/components/sections/Testimonials.astro

export interface Testimonial {
    content: string;
    author: {
        name: string;
        title?: string;
        company?: string;
        image?: string;
        initials?: string;
    };
    rating?: number; // Optional rating out of 5
}

export interface Props {
    title?: string;
    subtitle?: string;
    description?: string;
    testimonials: Testimonial[];
    style?: 'grid' | 'carousel' | 'featured' | 'quotes';
    columns?: 1 | 2 | 3;
    withBackground?: boolean;
    withCards?: boolean;
    withImages?: boolean;
    withRatings?: boolean;
    className?: string;
}

const {
    title = 'What Our Customers Say',
    subtitle,
    description,
    testimonials = [],
    style = 'grid',
    columns = 3,
    withBackground = true,
    withCards = true,
    withImages = true,
    withRatings = true,
    className = '',
} = Astro.props;

// Configure columns classes based on the number of columns
const columnConfig = {
    1: 'md:grid-cols-1',
    2: 'md:grid-cols-2',
    3: 'md:grid-cols-3',
};

// Set section background classes
const sectionClasses = `py-16 md:py-24 ${withBackground ? 'bg-gray-50 dark:bg-gray-800' : ''} ${className}`;

// Render star ratings
const renderStars = (rating: number) => {
    return Array.from({ length: 5 }).map((_, i) => {
        const isFilled = i < Math.floor(rating);

        return `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ${isFilled ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}" viewBox="0 0 20 20" fill="currentColor">
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </svg>`;
    }).join('');
};

// Generate avatar content (image or initials)
const renderAvatar = (testimonial: Testimonial) => {
    if (testimonial.author.image && withImages) {
        return `<img src="${testimonial.author.image}" alt="${testimonial.author.name}" class="h-12 w-12 rounded-full object-cover">`;
    } else if (testimonial.author.initials) {
        return `<div class="h-12 w-12 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-blue-600 dark:text-blue-400 font-medium">
            ${testimonial.author.initials}
        </div>`;
    } else {
        // First letter of first and last name
        const initials = testimonial.author.name
            .split(' ')
            .map(n => n[0])
            .join('')
            .toUpperCase()
            .substring(0, 2);

        return `<div class="h-12 w-12 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-blue-600 dark:text-blue-400 font-medium">
            ${initials}
        </div>`;
    }
};

---

<section class={sectionClasses}>
    <div class="container-custom">
        <!-- Section Header -->
        {(title || subtitle || description) && (
            <div class="text-center mb-12">
                {subtitle && (
                    <p class="text-sm md:text-base uppercase tracking-wider font-medium mb-3 text-blue-600 dark:text-blue-400">
                        {subtitle}
                    </p>
                )}

                {title && (
                    <h2 class="text-3xl md:text-4xl font-bold mb-4">
                        {title}
                    </h2>
                )}

                {description && (
                    <p class="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
                        {description}
                    </p>
                )}
            </div>
        )}

        <!-- Grid Layout -->
        {style === 'grid' && (
            <div class={`grid grid-cols-1 ${columnConfig[columns]} gap-8`}>
                {testimonials.map((testimonial) => (
                    <div class={`testimonial ${withCards ? 'card p-6 md:p-8' : ''}`}>
                        {withRatings && testimonial.rating && (
                            <div class="flex mb-4">
                                <Fragment set:html={renderStars(testimonial.rating)} />
                            </div>
                        )}

                        <blockquote class="mb-4">
                            <p class="text-gray-600 dark:text-gray-300 text-lg italic">"{testimonial.content}"</p>
                        </blockquote>

                        <div class="flex items-center">
                            <div class="mr-4">
                                <Fragment set:html={renderAvatar(testimonial)} />
                            </div>
                            <div>
                                <cite class="font-bold text-gray-900 dark:text-white not-italic">
                                    {testimonial.author.name}
                                </cite>
                                {(testimonial.author.title || testimonial.author.company) && (
                                    <p class="text-sm text-gray-500 dark:text-gray-400">
                                        {testimonial.author.title}
                                        {testimonial.author.title && testimonial.author.company && ', '}
                                        {testimonial.author.company}
                                    </p>
                                )}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        )}

        <!-- Featured Testimonial -->
        {style === 'featured' && testimonials.length > 0 && (
            <div class={`max-w-4xl mx-auto ${withCards ? 'card p-8 md:p-12' : ''}`}>
                <div class="text-center mb-8">
                    {withRatings && testimonials[0].rating && (
                        <div class="flex justify-center mb-6">
                            <Fragment set:html={renderStars(testimonials[0].rating)} />
                        </div>
                    )}

                    <blockquote class="mb-8">
                        <p class="text-xl md:text-2xl text-gray-600 dark:text-gray-300 italic leading-relaxed">
                            "{testimonials[0].content}"
                        </p>
                    </blockquote>

                    <div class="flex items-center justify-center">
                        <div class="mr-4">
                            <Fragment set:html={renderAvatar(testimonials[0])} />
                        </div>
                        <div class="text-left">
                            <cite class="font-bold text-gray-900 dark:text-white not-italic">
                                {testimonials[0].author.name}
                            </cite>
                            {(testimonials[0].author.title || testimonials[0].author.company) && (
                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                    {testimonials[0].author.title}
                                    {testimonials[0].author.title && testimonials[0].author.company && ', '}
                                    {testimonials[0].author.company}
                                </p>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        )}

        <!-- Quote-Focused Layout -->
        {style === 'quotes' && (
            <div class="max-w-6xl mx-auto">
                <div class={`grid grid-cols-1 ${columnConfig[columns]} gap-8 md:gap-12`}>
                    {testimonials.map((testimonial) => (
                        <div class="text-center">
                            <div class="mb-6 text-blue-500 dark:text-blue-400">
                                <svg class="w-12 h-12 mx-auto" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                    <path d="M464 256h-80v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8c-88.4 0-160 71.6-160 160v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48zm-288 0H96v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8C71.6 32 0 103.6 0 192v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z" />
                                </svg>
                            </div>

                            <blockquote class="mb-6">
                                <p class="text-xl text-gray-600 dark:text-gray-300">
                                    {testimonial.content}
                                </p>
                            </blockquote>

                            <cite class="font-bold text-gray-900 dark:text-white not-italic">
                                {testimonial.author.name}
                            </cite>
                            {(testimonial.author.title || testimonial.author.company) && (
                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                    {testimonial.author.title}
                                    {testimonial.author.title && testimonial.author.company && ', '}
                                    {testimonial.author.company}
                                </p>
                            )}
                        </div>
                    ))}
                </div>
            </div>
        )}

        <!-- Basic Carousel (Just the structure - JS will be needed for functionality) -->
        {style === 'carousel' && (
            <div class="testimonial-carousel max-w-4xl mx-auto relative">
                <div class="overflow-hidden">
                    <div class="testimonial-slides flex transition-transform duration-300">
                        {testimonials.map((testimonial, idx) => (
                            <div class={`testimonial-slide w-full flex-shrink-0 ${withCards ? 'card p-6 md:p-8 mx-4' : 'mx-4'}`} data-slide-index={idx}>
                                {withRatings && testimonial.rating && (
                                    <div class="flex mb-4">
                                        <Fragment set:html={renderStars(testimonial.rating)} />
                                    </div>
                                )}

                                <blockquote class="mb-6">
                                    <p class="text-lg text-gray-600 dark:text-gray-300 italic">
                                        "{testimonial.content}"
                                    </p>
                                </blockquote>

                                <div class="flex items-center">
                                    <div class="mr-4">
                                        <Fragment set:html={renderAvatar(testimonial)} />
                                    </div>
                                    <div>
                                        <cite class="font-bold text-gray-900 dark:text-white not-italic">
                                            {testimonial.author.name}
                                        </cite>
                                        {(testimonial.author.title || testimonial.author.company) && (
                                            <p class="text-sm text-gray-500 dark:text-gray-400">
                                                {testimonial.author.title}
                                                {testimonial.author.title && testimonial.author.company && ', '}
                                                {testimonial.author.company}
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                <!-- Carousel Controls -->
                <div class="flex justify-center mt-8 gap-2">
                    <button class="carousel-prev p-2 rounded-full bg-white dark:bg-gray-700 shadow hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label="Previous testimonial">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <div class="carousel-indicators flex space-x-2">
                        {testimonials.map((_, idx) => (
                            <button class={`carousel-indicator w-2.5 h-2.5 rounded-full bg-gray-300 dark:bg-gray-600 ${idx === 0 ? 'bg-blue-500 dark:bg-blue-400' : ''}`} data-index={idx} aria-label={`Go to slide ${idx + 1}`}></button>
                        ))}
                    </div>
                    <button class="carousel-next p-2 rounded-full bg-white dark:bg-gray-700 shadow hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label="Next testimonial">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
        )}
    </div>
</section>

<script>
    // Simple carousel functionality
    function initCarousels() {
        document.querySelectorAll('.testimonial-carousel').forEach(carousel => {
            // Elements
            const slidesContainer = carousel.querySelector('.testimonial-slides');
            const prevButton = carousel.querySelector('.carousel-prev');
            const nextButton = carousel.querySelector('.carousel-next');
            const indicators = carousel.querySelectorAll('.carousel-indicator');
            const slides = carousel.querySelectorAll('.testimonial-slide');

            if (!slidesContainer || !slides.length) return;

            let currentIndex = 0;
            const slideCount = slides.length;

            // Set initial styles for proper layout
            slidesContainer.style.width = `${slideCount * 100}%`;
            slides.forEach(slide => {
                slide.style.width = `${100 / slideCount}%`;
            });

            // Function to update the carousel display
            const updateCarousel = (index) => {
                currentIndex = index;

                // Update slides transform
                slidesContainer.style.transform = `translateX(-${currentIndex * (100 / slideCount)}%)`;

                // Update indicators
                indicators.forEach((indicator, i) => {
                    if (i === currentIndex) {
                        indicator.classList.add('bg-blue-500', 'dark:bg-blue-400');
                        indicator.classList.remove('bg-gray-300', 'dark:bg-gray-600');
                    } else {
                        indicator.classList.remove('bg-blue-500', 'dark:bg-blue-400');
                        indicator.classList.add('bg-gray-300', 'dark:bg-gray-600');
                    }
                });
            };

            // Event Listeners
            if (prevButton) {
                prevButton.addEventListener('click', () => {
                    const newIndex = (currentIndex - 1 + slideCount) % slideCount;
                    updateCarousel(newIndex);
                });
            }

            if (nextButton) {
                nextButton.addEventListener('click', () => {
                    const newIndex = (currentIndex + 1) % slideCount;
                    updateCarousel(newIndex);
                });
            }

            // Indicator buttons
            indicators.forEach((indicator, i) => {
                indicator.addEventListener('click', () => {
                    updateCarousel(i);
                });
            });

            // Initialize
            updateCarousel(0);

            // Optional: Auto-play functionality
            // let intervalId;
            // const startAutoPlay = () => {
            //     intervalId = setInterval(() => {
            //         const newIndex = (currentIndex + 1) % slideCount;
            //         updateCarousel(newIndex);
            //     }, 5000); // Change slide every 5 seconds
            // };

            // const stopAutoPlay = () => {
            //     clearInterval(intervalId);
            // };

            // startAutoPlay();
            // carousel.addEventListener('mouseenter', stopAutoPlay);
            // carousel.addEventListener('mouseleave', startAutoPlay);
        });
    }

    // Initialize carousels when the DOM is loaded
    document.addEventListener('DOMContentLoaded', initCarousels);

    // Ensure we reinitialize if the component is loaded via client-side navigation
    document.addEventListener('astro:page-load', initCarousels);
</script>